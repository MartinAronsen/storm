<?php

/**
 * @brief       Bitbucket Class
 * @author      -storm_author-
 * @copyright   -storm_copyright-
 * @package     IPS Social Suite
 * @subpackage  Storm
 * @since       1.0.3
 * @version     -storm_version-
 */

namespace IPS\storm\widgets;

/* To prevent PHP errors (extending class does not exist) revealing path */
if( !defined( '\IPS\SUITE_UNIQUE_KEY' ) )
{
    header( ( isset( $_SERVER[ 'SERVER_PROTOCOL' ] ) ? $_SERVER[ 'SERVER_PROTOCOL' ] : 'HTTP/1.0' ) . ' 403 Forbidden' );
    exit;
}

/**
 * bitbucket Widget
 */
class _bitbucket extends \IPS\Widget
{

    /**
     * @brief    Widget Key
     */
    public $key = 'bitbucket';

    /**
     * @brief    App
     */
    public $app = 'storm';

    /**
     * @brief    Plugin
     */
    public $plugin = '';

    /**
     * Initialise this widget
     *
     * @return void
     */
    public function init()
    {
        // Use this to perform any set up and to assign a template that is not in the following format:
        // $this->template( array( \IPS\Theme::i()->getTemplate( 'widgets', $this->app, 'front' ), $this->key ) );
        // If you are creating a plugin, uncomment this line:
        // $this->template( array( \IPS\Theme::i()->getTemplate( 'plugins', 'core', 'global' ), $this->key ) );
        // And then create your template at located at plugins/<your plugin>/dev/html/bitbucket.phtml

        parent::init();
    }

    /**
     * Specify widget configuration
     *
     * @param    null|\IPS\Helpers\Form $form Form object
     * @return    null|\IPS\Helpers\Form
     */
    public function configuration( &$form = null )
    {
        if( $form === null )
        {
            $form = new \IPS\Helpers\Form;
        }

        $max = new \IPS\Helpers\Form\Number( 'storm_max_to_show',
            ( isset( $this->configuration[ 'storm_max_to_show' ] ) ) ? $this->configuration[ 'storm_max_to_show' ] : 5 );

        $form->add( $max );

        return $form;
    }

    /**
     * Ran before saving widget configuration
     *
     * @param    array $values Values from form
     * @return    array
     */
    public function preConfig( $values )
    {
        return $values;
    }

    /**
     * Render a widget
     *
     * @return    string
     */
    public function render()
    {
        $max = ( isset( $this->configuration[ 'storm_max_to_show' ] ) ) ? $this->configuration[ 'storm_max_to_show' ] : 5;

        $where = [];

        $messages = new \IPS\Patterns\ActiveRecordIterator(
            \IPS\Db::i()->select( '*', 'storm_webhooks', $where, 'id DESC', $max ),
            'IPS\storm\Bitbucket'
        );

        return $this->output( $messages );
        // Use $this->output( $foo, $bar ); to return a string generated by the template set in init() or manually added via $widget->template( $callback );
        // Note you MUST route output through $this->output() rather than calling \IPS\Theme::i()->getTemplate() because of the way widgets are cached
    }
}